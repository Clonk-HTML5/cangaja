{
    "project": {
        "name": "Cangaja API",
        "description": "Canvas Game JavaScript Framework",
        "version": "0.0.0",
        "url": "http://example.com/"
    },
    "files": {
        "engine/animation.js": {
            "name": "engine/animation.js",
            "modules": {},
            "classes": {
                "CG.Animation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/b2d-bridge.js": {
            "name": "engine/b2d-bridge.js",
            "modules": {},
            "classes": {
                "CG.B2DBridge": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/b2d-circle.js": {
            "name": "engine/b2d-circle.js",
            "modules": {},
            "classes": {
                "CG.B2DCirlce": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/b2d-entity.js": {
            "name": "engine/b2d-entity.js",
            "modules": {},
            "classes": {
                "CG.B2DEntity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/b2d-line.js": {
            "name": "engine/b2d-line.js",
            "modules": {},
            "classes": {
                "CG.B2DLine": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/b2d-polygon.js": {
            "name": "engine/b2d-polygon.js",
            "modules": {},
            "classes": {
                "CG.B2DPolygon": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/b2d-rectangle.js": {
            "name": "engine/b2d-rectangle.js",
            "modules": {},
            "classes": {
                "CG.B2DRectangle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/b2d-rope.js": {
            "name": "engine/b2d-rope.js",
            "modules": {},
            "classes": {
                "CG.B2DRope": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/b2d-world.js": {
            "name": "engine/b2d-world.js",
            "modules": {},
            "classes": {
                "CG.B2DWorld": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/bitmap.js": {
            "name": "engine/bitmap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "engine/bound.js": {
            "name": "engine/bound.js",
            "modules": {},
            "classes": {
                "CG.Bound": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/buffer.js": {
            "name": "engine/buffer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "engine/button.js": {
            "name": "engine/button.js",
            "modules": {},
            "classes": {
                "CG.Button": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/delta.js": {
            "name": "engine/delta.js",
            "modules": {},
            "classes": {
                "CG.Delta": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/director.js": {
            "name": "engine/director.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "engine/emitter.js": {
            "name": "engine/emitter.js",
            "modules": {},
            "classes": {
                "CG.Emitter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/entity.js": {
            "name": "engine/entity.js",
            "modules": {},
            "classes": {
                "CG.Entity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/font.js": {
            "name": "engine/font.js",
            "modules": {},
            "classes": {
                "CG.Font": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/intro.js": {
            "name": "engine/intro.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "engine/layer.js": {
            "name": "engine/layer.js",
            "modules": {},
            "classes": {
                "CG.Layer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/map.js": {
            "name": "engine/map.js",
            "modules": {},
            "classes": {
                "CG.Map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/maparea.js": {
            "name": "engine/maparea.js",
            "modules": {},
            "classes": {
                "CG.MapArea": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/mappoint.js": {
            "name": "engine/mappoint.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "engine/maptilelayer.js": {
            "name": "engine/maptilelayer.js",
            "modules": {},
            "classes": {
                "CG.MapTileLayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/maptileproperties.js": {
            "name": "engine/maptileproperties.js",
            "modules": {},
            "classes": {
                "CG.MapTileProperties": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/mediaasset.js": {
            "name": "engine/mediaasset.js",
            "modules": {},
            "classes": {
                "CG.MediaAsset": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/menu.js": {
            "name": "engine/menu.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "engine/morph.js": {
            "name": "engine/morph.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "engine/particle.js": {
            "name": "engine/particle.js",
            "modules": {},
            "classes": {
                "CG.Particle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/point.js": {
            "name": "engine/point.js",
            "modules": {},
            "classes": {
                "CG.Point": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/rectangle.js": {
            "name": "engine/rectangle.js",
            "modules": {},
            "classes": {
                "CG.Rectangle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/screen.js": {
            "name": "engine/screen.js",
            "modules": {},
            "classes": {
                "CG.Screen": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/sequence.js": {
            "name": "engine/sequence.js",
            "modules": {},
            "classes": {
                "CG.Sequence": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/sprite.js": {
            "name": "engine/sprite.js",
            "modules": {},
            "classes": {
                "CG.Sprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/string.js": {
            "name": "engine/string.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "engine/texturepacker.js": {
            "name": "engine/texturepacker.js",
            "modules": {},
            "classes": {
                "CG.TexturePacker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/tpimage.js": {
            "name": "engine/tpimage.js",
            "modules": {},
            "classes": {
                "CG.TPImage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/translate.js": {
            "name": "engine/translate.js",
            "modules": {},
            "classes": {
                "CG.Translate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "engine/vector.js": {
            "name": "engine/vector.js",
            "modules": {},
            "classes": {
                "CG.Vector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/demo-sprite-collision.js": {
            "name": "js/demo-sprite-collision.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/demo-sprite-follower.js": {
            "name": "js/demo-sprite-follower.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/demo-tilemap-advanced-tilecollision.js": {
            "name": "js/demo-tilemap-advanced-tilecollision.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "CG.Animation": {
            "name": "CG.Animation",
            "shortname": "CG.Animation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/animation.js",
            "line": 1,
            "description": "Class Animation extends class Sprite and add support for animation ;o) needs atlas files with fixed framesizes and with following animation frames",
            "extends": "CG.Sprite"
        },
        "CG.B2DBridge": {
            "name": "CG.B2DBridge",
            "shortname": "CG.B2DBridge",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/b2d-bridge.js",
            "line": 7,
            "description": "B2DBridge - creates a bridge with segments",
            "extends": "CG.B2DEntity"
        },
        "CG.B2DCirlce": {
            "name": "CG.B2DCirlce",
            "shortname": "CG.B2DCirlce",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/b2d-circle.js",
            "line": 7,
            "description": "B2DCircle",
            "extends": "CG.B2DEntity"
        },
        "CG.B2DEntity": {
            "name": "CG.B2DEntity",
            "shortname": "CG.B2DEntity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/b2d-entity.js",
            "line": 7,
            "description": "B2DEntity",
            "extends": "CG.Entity"
        },
        "CG.B2DLine": {
            "name": "CG.B2DLine",
            "shortname": "CG.B2DLine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/b2d-line.js",
            "line": 7,
            "description": "B2DLine",
            "extends": "CG.B2DEntity"
        },
        "CG.B2DPolygon": {
            "name": "CG.B2DPolygon",
            "shortname": "CG.B2DPolygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/b2d-polygon.js",
            "line": 7,
            "description": "B2DPolygon - uses PhysicsEditor export Lime + Corona (json)\nsupported options are friction, density and bounce",
            "extends": "CG.B2DEntity"
        },
        "CG.B2DRectangle": {
            "name": "CG.B2DRectangle",
            "shortname": "CG.B2DRectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/b2d-rectangle.js",
            "line": 7,
            "description": "B2DRectangle",
            "extends": "CG.B2DEntity"
        },
        "CG.B2DRope": {
            "name": "CG.B2DRope",
            "shortname": "CG.B2DRope",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/b2d-rope.js",
            "line": 7,
            "description": "B2DRope - creates a rope with segments",
            "extends": "CG.B2DEntity"
        },
        "CG.B2DWorld": {
            "name": "CG.B2DWorld",
            "shortname": "CG.B2DWorld",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/b2d-world.js",
            "line": 7,
            "description": "B2DWorld",
            "xtend": "CG.Layer"
        },
        "CG.Bound": {
            "name": "CG.Bound",
            "shortname": "CG.Bound",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/bound.js",
            "line": 1,
            "description": "Class Bound extends Class Entity",
            "extends": "CG.Entity"
        },
        "CG.Button": {
            "name": "CG.Button",
            "shortname": "CG.Button",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/button.js",
            "line": 1,
            "description": "button class, can handle click and mouseover.",
            "extends": "CG.Sprite"
        },
        "CG.Delta": {
            "name": "CG.Delta",
            "shortname": "CG.Delta",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/delta.js",
            "line": 1,
            "description": "class CG.Delta not really used at the moment ;o)",
            "extends": "Class"
        },
        "CG.Emitter": {
            "name": "CG.Emitter",
            "shortname": "CG.Emitter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/emitter.js",
            "line": 1,
            "description": "Emitter class that handles . . . particles.",
            "extends": "CG.Entity",
            "params": [
                {
                    "name": "position",
                    "description": "of emitter",
                    "type": "Point"
                }
            ]
        },
        "CG.Entity": {
            "name": "CG.Entity",
            "shortname": "CG.Entity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/entity.js",
            "line": 7,
            "description": "class Entity the base class of cangaja"
        },
        "CG.Font": {
            "name": "CG.Font",
            "shortname": "CG.Font",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/font.js",
            "line": 1,
            "description": "class Font supports loading and drawing font files (EZ GUI Text format) from Glyph Designer, (Hiero works also but need some modifications of the exportet files)",
            "extends": "CG.Entity"
        },
        "CG.Layer": {
            "name": "CG.Layer",
            "shortname": "CG.Layer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/layer.js",
            "line": 1,
            "description": "class Layer container to collect/group sprites, buttons, menus, emitters and animations",
            "extends": "CG.Entity"
        },
        "CG.Map": {
            "name": "CG.Map",
            "shortname": "CG.Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/map.js",
            "line": 1,
            "description": "class Map supports loading and rendering maps from the editor Tiled.\nXML and JSON file types are supported.\nXML => supported tiled encodings are csv and xml (see settings!). base64, base64(gzip) and base64(zlib) are not supported!\n\nSupported types of the object layer are:\n- object/group (rectangle?)\n- tile element, reference point is bottom/CG.LEFT\n\nThese object layer types are used to generate Point and Bound objects and can be used to position sprites, what ever in the map.",
            "extends": "CG.Entity\n\nTODO spacing and margin ?\nTODO own buffer for drawing => split screen possible?\nTODO update & draw method 50%"
        },
        "CG.MapArea": {
            "name": "CG.MapArea",
            "shortname": "CG.MapArea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/maparea.js",
            "line": 1,
            "description": "class MapArea. Support now for name and the bound values.",
            "extends": "Class"
        },
        "CG.MapTileLayer": {
            "name": "CG.MapTileLayer",
            "shortname": "CG.MapTileLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/maptilelayer.js",
            "line": 1,
            "description": "MapTileLayer",
            "extends": "Class"
        },
        "CG.MapTileProperties": {
            "name": "CG.MapTileProperties",
            "shortname": "CG.MapTileProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/maptileproperties.js",
            "line": 1,
            "description": "MapTileProperties",
            "extends": "Class"
        },
        "CG.MediaAsset": {
            "name": "CG.MediaAsset",
            "shortname": "CG.MediaAsset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/mediaasset.js",
            "line": 1,
            "description": "MediaAsset",
            "extends": "Class"
        },
        "CG.Particle": {
            "name": "CG.Particle",
            "shortname": "CG.Particle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/particle.js",
            "line": 1,
            "descriptiom": "class Particle",
            "extends": "CG.Sprite"
        },
        "CG.Point": {
            "name": "CG.Point",
            "shortname": "CG.Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/point.js",
            "line": 1,
            "description": "class Point",
            "extends": "CG.Entity"
        },
        "CG.Rectangle": {
            "name": "CG.Rectangle",
            "shortname": "CG.Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/rectangle.js",
            "line": 1,
            "description": "class Rectangle for click and mouseover handling, collision detection and AABB function",
            "extends": "CG.Entity"
        },
        "CG.Screen": {
            "name": "CG.Screen",
            "shortname": "CG.Screen",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/screen.js",
            "line": 1,
            "description": "class Screen container to collect/group CG.Layers and/or CG.B2DWorld",
            "extends": "Entity",
            "params": [
                {
                    "name": "screenname",
                    "description": "the name of the screen",
                    "type": "String"
                }
            ]
        },
        "CG.Sequence": {
            "name": "CG.Sequence",
            "shortname": "CG.Sequence",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/sequence.js",
            "line": 1,
            "description": "class Sequence container to collect/group CG.Translation objects",
            "extends": "Entity"
        },
        "CG.Sprite": {
            "name": "CG.Sprite",
            "shortname": "CG.Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/sprite.js",
            "line": 1,
            "description": "the Sprite class",
            "extends": "CG.Rectangle"
        },
        "CG.TexturePacker": {
            "name": "CG.TexturePacker",
            "shortname": "CG.TexturePacker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/texturepacker.js",
            "line": 1,
            "description": "TexturePacker class supports loading xml and json files from . . . TexturePacker ;o) No trimming at the moment, keep texturepacker settings simple! TexturePacker parses the xml/json and generates new CG.TPImage objects in the MediaAsset manager. These TPImages are only handled within Sprite, Particle and Button class.",
            "extends": "Class"
        },
        "CG.TPImage": {
            "name": "CG.TPImage",
            "shortname": "CG.TPImage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/tpimage.js",
            "line": 1,
            "description": "TexturePacker TPImage class. It is needed when using TexturePacker atlas files.",
            "extends": "Class"
        },
        "CG.Translate": {
            "name": "CG.Translate",
            "shortname": "CG.Translate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/translate.js",
            "line": 1,
            "description": "class Translate moving a object",
            "extends": "CG.Entity"
        },
        "CG.Vector": {
            "name": "CG.Vector",
            "shortname": "CG.Vector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "engine/vector.js",
            "line": 1,
            "description": "class Vector",
            "extends": "CG.Point"
        }
    },
    "classitems": [
        {
            "file": "engine/animation.js",
            "line": 9,
            "is_constructor": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "image",
                    "description": "image imagepath or image object",
                    "type": "String, image"
                },
                {
                    "name": "position",
                    "description": "position object",
                    "type": "Point"
                },
                {
                    "name": "startframe",
                    "description": "startframe startframe of atlas image",
                    "type": "Number"
                },
                {
                    "name": "endframe",
                    "description": "endframe endframe of atlas image",
                    "type": "Number"
                },
                {
                    "name": "framewidth",
                    "description": "framewidth width of frame to cut",
                    "type": "Number"
                },
                {
                    "name": "frameheight",
                    "description": "frameheight height of frame to cut",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Animation"
        },
        {
            "file": "engine/animation.js",
            "line": 31,
            "itemtype": "property",
            "name": "loop",
            "type": "Boolean",
            "class": "CG.Animation"
        },
        {
            "file": "engine/animation.js",
            "line": 35,
            "itemtype": "property",
            "name": "status",
            "type": "Number",
            "class": "CG.Animation"
        },
        {
            "file": "engine/animation.js",
            "line": 39,
            "itemtype": "property",
            "name": "currentframe",
            "type": "Number",
            "class": "CG.Animation"
        },
        {
            "file": "engine/animation.js",
            "line": 43,
            "itemtype": "property",
            "name": "frames",
            "type": "Number",
            "class": "CG.Animation"
        },
        {
            "file": "engine/animation.js",
            "line": 47,
            "itemtype": "property",
            "name": "startframe",
            "type": "Number",
            "class": "CG.Animation"
        },
        {
            "file": "engine/animation.js",
            "line": 51,
            "itemtype": "property",
            "name": "endframe",
            "type": "Number",
            "class": "CG.Animation"
        },
        {
            "file": "engine/animation.js",
            "line": 55,
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "CG.Animation"
        },
        {
            "file": "engine/animation.js",
            "line": 59,
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "CG.Animation"
        },
        {
            "file": "engine/animation.js",
            "line": 73,
            "itemtype": "property",
            "name": "fx",
            "type": "Number",
            "class": "CG.Animation"
        },
        {
            "file": "engine/animation.js",
            "line": 77,
            "itemtype": "property",
            "name": "fy",
            "type": "Number",
            "class": "CG.Animation"
        },
        {
            "file": "engine/animation.js",
            "line": 82,
            "itemtype": "property",
            "name": "delay",
            "type": "Number",
            "class": "CG.Animation"
        },
        {
            "file": "engine/animation.js",
            "line": 86,
            "itemtype": "property",
            "name": "tempdelay",
            "type": "Number",
            "class": "CG.Animation"
        },
        {
            "file": "engine/b2d-bridge.js",
            "line": 1,
            "description": "© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "class": "CG.B2DBridge"
        },
        {
            "file": "engine/b2d-bridge.js",
            "line": 14,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "world",
                    "description": "reference to world of B2DWorld",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "id or name to identify",
                    "type": "String"
                },
                {
                    "name": "image",
                    "description": "path to image, image or tpimage from asset",
                    "type": "Mixed"
                },
                {
                    "name": "x",
                    "description": "the x position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "the length/width of the bridge",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "segments of the bridge",
                    "type": "Number"
                },
                {
                    "name": "segmentHeight",
                    "description": "height of a segment",
                    "type": "Number"
                },
                {
                    "name": "scale",
                    "description": "the world scale of B2DWorld",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.B2DBridge"
        },
        {
            "file": "engine/b2d-bridge.js",
            "line": 30,
            "itemtype": "property",
            "name": "length",
            "type": "{Number}",
            "class": "CG.B2DBridge"
        },
        {
            "file": "engine/b2d-bridge.js",
            "line": 35,
            "itemtype": "property",
            "name": "segments",
            "type": "{Number}",
            "class": "CG.B2DBridge"
        },
        {
            "file": "engine/b2d-bridge.js",
            "line": 40,
            "itemtype": "property",
            "name": "segmentHeight",
            "type": "{Number}",
            "class": "CG.B2DBridge"
        },
        {
            "file": "engine/b2d-bridge.js",
            "line": 45,
            "itemtype": "property",
            "name": "segmentWidth",
            "type": "{Number}",
            "class": "CG.B2DBridge"
        },
        {
            "file": "engine/b2d-bridge.js",
            "line": 50,
            "itemtype": "property",
            "name": "anchor",
            "type": "{b2Vec2}",
            "class": "CG.B2DBridge"
        },
        {
            "file": "engine/b2d-bridge.js",
            "line": 55,
            "itemtype": "property",
            "name": "prevBodf",
            "type": "{Object}",
            "class": "CG.B2DBridge"
        },
        {
            "file": "engine/b2d-bridge.js",
            "line": 60,
            "itemtype": "property",
            "name": "bodyGroup",
            "type": "{Array}",
            "class": "CG.B2DBridge"
        },
        {
            "file": "engine/b2d-bridge.js",
            "line": 65,
            "itemtype": "property",
            "name": "bodyCount",
            "type": "{Number}",
            "class": "CG.B2DBridge"
        },
        {
            "file": "engine/b2d-circle.js",
            "line": 1,
            "description": "© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "class": "CG.B2DCirlce"
        },
        {
            "file": "engine/b2d-circle.js",
            "line": 14,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "world",
                    "description": "reference to world of B2DWorld",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "id or name to identify",
                    "type": "String"
                },
                {
                    "name": "image",
                    "description": "path to image, image or tpimage from asset",
                    "type": "Mixed"
                },
                {
                    "name": "radius",
                    "description": "json file from PhysicsEditor from asset",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "the x position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position",
                    "type": "Number"
                },
                {
                    "name": "scale",
                    "description": "the world scale of B2DWorld",
                    "type": "Number"
                },
                {
                    "name": "stat",
                    "description": "is the body static or dynamic",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.B2DCirlce"
        },
        {
            "file": "engine/b2d-circle.js",
            "line": 29,
            "itemtype": "property",
            "name": "radius",
            "type": "{Number}",
            "class": "CG.B2DCirlce"
        },
        {
            "file": "engine/b2d-circle.js",
            "line": 34,
            "itemtype": "property",
            "name": "stat",
            "type": "{*}",
            "class": "CG.B2DCirlce"
        },
        {
            "file": "engine/b2d-circle.js",
            "line": 40,
            "itemtype": "property",
            "name": "bodyDef.type",
            "type": "{b2Body.b2_staticBody/b2Body.b2_dynamicBody}",
            "class": "CG.B2DCirlce"
        },
        {
            "file": "engine/b2d-circle.js",
            "line": 49,
            "itemtype": "property",
            "name": "fixDef.shape",
            "type": "{b2CircleShape}",
            "class": "CG.B2DCirlce"
        },
        {
            "file": "engine/b2d-circle.js",
            "line": 54,
            "itemtype": "property",
            "name": "bodyDef.position.x",
            "type": "{Number}",
            "class": "CG.B2DCirlce"
        },
        {
            "file": "engine/b2d-circle.js",
            "line": 59,
            "itemtype": "property",
            "name": "bodyDef.position.y",
            "type": "{Number}",
            "class": "CG.B2DCirlce"
        },
        {
            "file": "engine/b2d-circle.js",
            "line": 64,
            "itemtype": "property",
            "name": "bdyDef.userData",
            "type": "{*}",
            "class": "CG.B2DCirlce"
        },
        {
            "file": "engine/b2d-circle.js",
            "line": 70,
            "itemtype": "property",
            "name": "body",
            "type": "{b2Body}",
            "class": "CG.B2DCirlce"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 1,
            "description": "© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 14,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "id or name to identify",
                    "type": "String"
                },
                {
                    "name": "image",
                    "description": "path to image, image or tpimage from asset",
                    "type": "Mixed"
                },
                {
                    "name": "world",
                    "description": "reference to world of B2DWorld",
                    "type": "Object"
                },
                {
                    "name": "x",
                    "description": "the x position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position",
                    "type": "Number"
                },
                {
                    "name": "scale",
                    "description": "the world scale of B2DWorld",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 29,
            "itemtype": "property",
            "name": "body",
            "type": "{b2Body}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 34,
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 39,
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 44,
            "itemtype": "property",
            "name": "scale",
            "type": "{Number}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 49,
            "itemtype": "property",
            "name": "id",
            "type": "{Object}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 54,
            "itemtype": "property",
            "name": "world",
            "type": "{b2World}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 59,
            "itemtype": "property",
            "name": "xhandle",
            "type": "{Number}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 64,
            "itemtype": "property",
            "name": "yhandle",
            "type": "{Number}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 70,
            "itemtype": "property",
            "name": "bodyDef",
            "type": "{b2BodyDef}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 75,
            "itemtype": "property",
            "name": "bodyDef.alowSleep",
            "type": "{Boolean}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 80,
            "itemtype": "property",
            "name": "bodyDef.awake",
            "type": "{Boolean}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 88,
            "itemtype": "property",
            "name": "fixDef",
            "type": "{b2FixtureDef}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 93,
            "itemtype": "property",
            "name": "fixDef.density",
            "type": "{Number}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 98,
            "itemtype": "property",
            "name": "fixDef.friction",
            "type": "{Number}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 103,
            "itemtype": "property",
            "name": "fixDef.restitution",
            "type": "{Number}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 109,
            "itemtype": "property",
            "name": "isHit",
            "type": "{Boolean}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 114,
            "itemtype": "property",
            "name": "strength",
            "type": "{Number}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 119,
            "itemtype": "property",
            "name": "dead",
            "type": "{Boolean}",
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-entity.js",
            "line": 127,
            "itemtype": "method",
            "name": "hit",
            "params": [
                {
                    "name": "impulse",
                    "description": ""
                },
                {
                    "name": "source",
                    "description": ""
                }
            ],
            "class": "CG.B2DEntity"
        },
        {
            "file": "engine/b2d-line.js",
            "line": 1,
            "description": "© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "class": "CG.B2DLine"
        },
        {
            "file": "engine/b2d-line.js",
            "line": 15,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "world",
                    "description": "reference to world of B2DWorld",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "id or name to identify",
                    "type": "String"
                },
                {
                    "name": "start",
                    "description": "start of line",
                    "type": "B2Vec2"
                },
                {
                    "name": "end",
                    "description": "end of line",
                    "type": "B2Vec2"
                },
                {
                    "name": "scale",
                    "description": "the world scale of B2DWorld",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.B2DLine"
        },
        {
            "file": "engine/b2d-line.js",
            "line": 27,
            "itemtype": "property",
            "name": "start",
            "type": "{Number}",
            "class": "CG.B2DLine"
        },
        {
            "file": "engine/b2d-line.js",
            "line": 32,
            "itemtype": "property",
            "name": "end",
            "type": "{Number}",
            "class": "CG.B2DLine"
        },
        {
            "file": "engine/b2d-line.js",
            "line": 37,
            "itemtype": "property",
            "name": "xhandle",
            "type": "{Number}",
            "class": "CG.B2DLine"
        },
        {
            "file": "engine/b2d-line.js",
            "line": 42,
            "itemtype": "property",
            "name": "yhandle",
            "type": "{Number}",
            "class": "CG.B2DLine"
        },
        {
            "file": "engine/b2d-line.js",
            "line": 47,
            "itemtype": "property",
            "name": "fixDef.shape",
            "type": "{b2PolygonShape}",
            "class": "CG.B2DLine"
        },
        {
            "file": "engine/b2d-line.js",
            "line": 53,
            "itemtype": "property",
            "name": "bodyDef.type",
            "type": "{Number}",
            "class": "CG.B2DLine"
        },
        {
            "file": "engine/b2d-line.js",
            "line": 58,
            "itemtype": "property",
            "name": "bodyDef.position",
            "class": "CG.B2DLine"
        },
        {
            "file": "engine/b2d-line.js",
            "line": 62,
            "itemtype": "property",
            "name": "bodyDef.userData",
            "type": "{*}",
            "class": "CG.B2DLine"
        },
        {
            "file": "engine/b2d-line.js",
            "line": 67,
            "itemtype": "property",
            "name": "body",
            "type": "{b2Body}",
            "class": "CG.B2DLine"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 1,
            "description": "© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 16,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "world",
                    "description": "reference to world of B2DWorld",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "id or name to identify",
                    "type": "String"
                },
                {
                    "name": "image",
                    "description": "path to image, image or tpimage from asset",
                    "type": "Mixed"
                },
                {
                    "name": "jsonpoly",
                    "description": "json file from PhysicsEditor from asset",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "the x position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position",
                    "type": "Number"
                },
                {
                    "name": "scale",
                    "description": "the world scale of B2DWorld",
                    "type": "Number"
                },
                {
                    "name": "stat",
                    "description": "is the body static or dynamic",
                    "type": "Boolean"
                },
                {
                    "name": "bullet",
                    "description": "bullet option",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 32,
            "itemtype": "property",
            "name": "stat",
            "type": "{*}",
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 37,
            "itemtype": "property",
            "name": "polys",
            "type": "{Array}",
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 42,
            "itemtype": "property",
            "name": "jsondata",
            "type": "{*}",
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 47,
            "itemtype": "property",
            "name": "xhandle",
            "type": "{Number}",
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 52,
            "itemtype": "property",
            "name": "yhandle",
            "type": "{Number}",
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 57,
            "itemtype": "property",
            "name": "vecs",
            "type": "{Array}",
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 64,
            "itemtype": "property",
            "name": "bodyDef.type",
            "type": "{b2Body.b2_staticBody/b2Body.b2_dynamicBody}",
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 73,
            "itemtype": "property",
            "name": "bodyDef.position",
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 77,
            "itemtype": "property",
            "name": "bodyDef.userData",
            "type": "{*}",
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 82,
            "itemtype": "property",
            "name": "bullet",
            "type": "{*}",
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 87,
            "itemtype": "property",
            "name": "bodyDef.bullet",
            "type": "{*}",
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 97,
            "itemtype": "property",
            "name": "body",
            "type": "{b2Body}",
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-polygon.js",
            "line": 118,
            "itemtype": "method",
            "name": "createVecs",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "CG.B2DPolygon"
        },
        {
            "file": "engine/b2d-rectangle.js",
            "line": 1,
            "description": "© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "class": "CG.B2DRectangle"
        },
        {
            "file": "engine/b2d-rectangle.js",
            "line": 14,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "world",
                    "description": "reference to world of B2DWorld",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "id or name to identify",
                    "type": "String"
                },
                {
                    "name": "image",
                    "description": "path to image, image or tpimage from asset",
                    "type": "Mixed"
                },
                {
                    "name": "x",
                    "description": "the x position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position",
                    "type": "Number"
                },
                {
                    "name": "scale",
                    "description": "the world scale of B2DWorld",
                    "type": "Number"
                },
                {
                    "name": "stat",
                    "description": "is the body static or dynamic",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.B2DRectangle"
        },
        {
            "file": "engine/b2d-rectangle.js",
            "line": 28,
            "type": "{*}",
            "class": "CG.B2DRectangle"
        },
        {
            "file": "engine/b2d-rectangle.js",
            "line": 33,
            "itemtype": "property",
            "name": "bodyDef.stat",
            "type": "{b2Body.b2_staticBody/b2Body.b2_dynamicBody}",
            "class": "CG.B2DRectangle"
        },
        {
            "file": "engine/b2d-rectangle.js",
            "line": 42,
            "itemtype": "property",
            "name": "fixDef.shape",
            "type": "{b2PolygonShape}",
            "class": "CG.B2DRectangle"
        },
        {
            "file": "engine/b2d-rectangle.js",
            "line": 48,
            "itemtype": "property",
            "name": "bodyDef.position.x",
            "type": "{Number}",
            "class": "CG.B2DRectangle"
        },
        {
            "file": "engine/b2d-rectangle.js",
            "line": 53,
            "itemtype": "property",
            "name": "bodyDef.position.y",
            "type": "{Number}",
            "class": "CG.B2DRectangle"
        },
        {
            "file": "engine/b2d-rectangle.js",
            "line": 58,
            "itemtype": "property",
            "name": "bodyDef.userData",
            "type": "{*}",
            "class": "CG.B2DRectangle"
        },
        {
            "file": "engine/b2d-rectangle.js",
            "line": 63,
            "itemtype": "property",
            "name": "body",
            "type": "{b2Body}",
            "class": "CG.B2DRectangle"
        },
        {
            "file": "engine/b2d-rope.js",
            "line": 1,
            "description": "© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "class": "CG.B2DRope"
        },
        {
            "file": "engine/b2d-rope.js",
            "line": 14,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "world",
                    "description": "reference to world of B2DWorld",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "id or name to identify",
                    "type": "String"
                },
                {
                    "name": "image",
                    "description": "path to image, image or tpimage from asset",
                    "type": "Mixed"
                },
                {
                    "name": "x",
                    "description": "the x position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "the length/width of the bridge",
                    "type": "Number"
                },
                {
                    "name": "segments",
                    "description": "segments of the bridge",
                    "type": "Number"
                },
                {
                    "name": "segmentWidth",
                    "description": "width of a segment",
                    "type": "Number"
                },
                {
                    "name": "scale",
                    "description": "the world scale of B2DWorld",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.B2DRope"
        },
        {
            "file": "engine/b2d-rope.js",
            "line": 30,
            "itemtype": "property",
            "name": "length",
            "type": "{Number}",
            "class": "CG.B2DRope"
        },
        {
            "file": "engine/b2d-rope.js",
            "line": 35,
            "itemtype": "property",
            "name": "segments",
            "type": "{Number}",
            "class": "CG.B2DRope"
        },
        {
            "file": "engine/b2d-rope.js",
            "line": 40,
            "itemtype": "property",
            "name": "segmentHeight",
            "type": "{Number}",
            "class": "CG.B2DRope"
        },
        {
            "file": "engine/b2d-rope.js",
            "line": 45,
            "itemtype": "property",
            "name": "segmentWidth",
            "type": "{*}",
            "class": "CG.B2DRope"
        },
        {
            "file": "engine/b2d-rope.js",
            "line": 50,
            "itemtype": "property",
            "name": "anchor",
            "type": "{b2Vec2}",
            "class": "CG.B2DRope"
        },
        {
            "file": "engine/b2d-rope.js",
            "line": 55,
            "itemtype": "property",
            "name": "prevBody",
            "type": "{Object}",
            "class": "CG.B2DRope"
        },
        {
            "file": "engine/b2d-rope.js",
            "line": 60,
            "itemtype": "property",
            "name": "bodyGroup",
            "type": "{Array}",
            "class": "CG.B2DRope"
        },
        {
            "file": "engine/b2d-rope.js",
            "line": 65,
            "itemtype": "property",
            "name": "bodyCount",
            "type": "{Number}",
            "class": "CG.B2DRope"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 1,
            "description": "© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 14,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "name of the b2dworld",
                    "type": "String"
                },
                {
                    "name": "opt",
                    "description": "additional options",
                    "type": "Object"
                }
            ],
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 22,
            "itemtype": "property",
            "name": "opt",
            "type": "{object}",
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 28,
            "itemtype": "property",
            "name": "name",
            "type": "{string}",
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 33,
            "itemtype": "property",
            "name": "debug",
            "type": "{Boolean}",
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 38,
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 43,
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 48,
            "itemtype": "property",
            "name": "elements",
            "type": "{Array}",
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 54,
            "itemtype": "property",
            "name": "world",
            "type": "{b2World}",
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 62,
            "itemtype": "property",
            "name": "uid",
            "type": "{Number}",
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 67,
            "itemtype": "property",
            "name": "scale",
            "type": "{Number}",
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 116,
            "itemtype": "method",
            "name": "addCustom",
            "params": [
                {
                    "name": "obj",
                    "description": "object    custom B2D object"
                }
            ],
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 125,
            "itemtype": "method",
            "name": "createBox",
            "params": [
                {
                    "name": "id",
                    "description": "string      id or name to identify"
                },
                {
                    "name": "image",
                    "description": "mixed       path to image, image or tpimage from asset"
                },
                {
                    "name": "x",
                    "description": "integer     the x position"
                },
                {
                    "name": "y",
                    "description": "integer     the y position"
                },
                {
                    "name": "stat",
                    "description": "boolean     is the body static or dynamic"
                }
            ],
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 139,
            "itemtype": "method",
            "name": "createLine",
            "params": [
                {
                    "name": "id",
                    "description": "string    id or name to identify"
                },
                {
                    "name": "start",
                    "description": "CG.Point  start o fline"
                },
                {
                    "name": "end",
                    "description": "CG.Point  end of line"
                }
            ],
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 151,
            "itemtype": "method",
            "name": "createCircle",
            "params": [
                {
                    "name": "id",
                    "description": "string      id or name to identify"
                },
                {
                    "name": "image",
                    "description": "mixed       path to image, image or tpimage from asset"
                },
                {
                    "name": "radius",
                    "description": "integer     the radius"
                },
                {
                    "name": "x",
                    "description": "integer     the x position"
                },
                {
                    "name": "y",
                    "description": "integer     the y position"
                },
                {
                    "name": "stat",
                    "description": "boolean     is the body static or dynamic"
                }
            ],
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 166,
            "itemtype": "method",
            "name": "createPolyBody",
            "params": [
                {
                    "name": "id",
                    "description": "string      id or name to identify"
                },
                {
                    "name": "image",
                    "description": "mixed       path to image, image or tpimage from asset"
                },
                {
                    "name": "jsonpoly",
                    "description": "string      json file from PhysicsEditor from asset"
                },
                {
                    "name": "x",
                    "description": "integer     the x position"
                },
                {
                    "name": "y",
                    "description": "integer     the y position"
                },
                {
                    "name": "stat",
                    "description": "boolean     is the body static or dynamic"
                },
                {
                    "name": "bullet",
                    "description": "boolean     bullet option"
                }
            ],
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 182,
            "itemtype": "method",
            "name": "createBridge",
            "params": [
                {
                    "name": "id",
                    "description": "string      id or name to identify"
                },
                {
                    "name": "image",
                    "description": "mixed       path to image, image or tpimage from asset"
                },
                {
                    "name": "x",
                    "description": "integer     the x position"
                },
                {
                    "name": "y",
                    "description": "integer     the y position"
                },
                {
                    "name": "length",
                    "description": "integer     the length/width of the bridge"
                },
                {
                    "name": "segments",
                    "description": "integer     segments of the bridge"
                },
                {
                    "name": "segmentHeight",
                    "description": "integer     height of a segment"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 199,
            "itemtype": "method",
            "name": "createRope",
            "params": [
                {
                    "name": "id",
                    "description": "string      id or name to identify"
                },
                {
                    "name": "image",
                    "description": "mixed       path to image, image or tpimage from asset"
                },
                {
                    "name": "x",
                    "description": "integer     the x position"
                },
                {
                    "name": "y",
                    "description": "integer     the y position"
                },
                {
                    "name": "length",
                    "description": "integer     the length/width of the bridge"
                },
                {
                    "name": "segments",
                    "description": "integer     segments of the bridge"
                },
                {
                    "name": "segmentHeight",
                    "description": "integer     height of a segment"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 233,
            "itemtype": "method",
            "name": "mouseUp",
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 240,
            "itemtype": "method",
            "name": "getBodyAt",
            "params": [
                {
                    "name": "x",
                    "description": ""
                },
                {
                    "name": "y",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 269,
            "itemtype": "method",
            "name": "deleteBodyAt",
            "params": [
                {
                    "name": "x",
                    "description": ""
                },
                {
                    "name": "y",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 289,
            "itemtype": "method",
            "name": "isMouseDown",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 296,
            "itemtype": "method",
            "name": "removeElementByIndex",
            "params": [
                {
                    "name": "index",
                    "description": ""
                }
            ],
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 303,
            "itemtype": "method",
            "name": "applyImpulse",
            "params": [
                {
                    "name": "body",
                    "description": ""
                },
                {
                    "name": "degrees",
                    "description": ""
                },
                {
                    "name": "power",
                    "description": ""
                }
            ],
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 316,
            "itemtype": "method",
            "name": "addContactListener",
            "params": [
                {
                    "name": "callbacks",
                    "description": ""
                }
            ],
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/b2d-world.js",
            "line": 337,
            "itemtype": "method",
            "name": "getBodySpec",
            "params": [
                {
                    "name": "b",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CG.B2DWorld"
        },
        {
            "file": "engine/bitmap.js",
            "line": 1,
            "description": "Class Bitmap extends Class Buffer",
            "is_constructor": 1,
            "uses": [
                "Entity"
            ],
            "params": [
                {
                    "name": "width",
                    "description": "the width for the buffer",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height for the buffer",
                    "type": "Number"
                }
            ],
            "class": "CG.Bound"
        },
        {
            "file": "engine/bitmap.js",
            "line": 21,
            "description": "loads image and draws it to the buffer",
            "params": [
                {
                    "name": "imgpath,",
                    "description": "image object or tpimage object to use",
                    "type": "String, image, tpimage"
                }
            ],
            "class": "CG.Bound"
        },
        {
            "file": "engine/bitmap.js",
            "line": 41,
            "description": "clearBuffer",
            "class": "CG.Bound"
        },
        {
            "file": "engine/bitmap.js",
            "line": 49,
            "description": "drawImageToBuffer",
            "class": "CG.Bound"
        },
        {
            "file": "engine/bitmap.js",
            "line": 58,
            "description": "clearRect",
            "params": [
                {
                    "name": "x",
                    "description": "the x position for clearRect",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position for clearRect",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "the width for clearRect",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the height for clearRect",
                    "type": "Number"
                }
            ],
            "class": "CG.Bound"
        },
        {
            "file": "engine/bitmap.js",
            "line": 73,
            "description": "clearCircle",
            "params": [
                {
                    "name": "x",
                    "description": "the x position for clearCircle",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position for clearCircle",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "the radius for clearCircle",
                    "type": "Number"
                }
            ],
            "class": "CG.Bound"
        },
        {
            "file": "engine/bitmap.js",
            "line": 90,
            "description": "getPixel",
            "params": [
                {
                    "name": "x",
                    "description": "the x position for getPixel",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position for getPixel",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "data from canvas",
                "type": "Imagedata"
            },
            "class": "CG.Bound"
        },
        {
            "file": "engine/bitmap.js",
            "line": 101,
            "description": "getPixels",
            "params": [
                {
                    "name": "x",
                    "description": "the x position for getPixels",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position for getPixels",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "for getPixels",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "for getPixels",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "data from canvas",
                "type": "Imagedata"
            },
            "class": "CG.Bound"
        },
        {
            "file": "engine/bound.js",
            "line": 9,
            "is_constructor": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "x",
                    "description": "x the x position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y the y position",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "width the width of bound",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height the height of bound",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Bound"
        },
        {
            "file": "engine/bound.js",
            "line": 20,
            "itemtype": "property",
            "name": "x",
            "type": "{Number}",
            "class": "CG.Bound"
        },
        {
            "file": "engine/bound.js",
            "line": 25,
            "itemtype": "property",
            "name": "y",
            "type": "{Number}",
            "class": "CG.Bound"
        },
        {
            "file": "engine/bound.js",
            "line": 30,
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "CG.Bound"
        },
        {
            "file": "engine/bound.js",
            "line": 35,
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "CG.Bound"
        },
        {
            "file": "engine/bound.js",
            "line": 43,
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "name",
                    "description": "of the bounding box",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Bound"
        },
        {
            "file": "engine/buffer.js",
            "line": 1,
            "description": "Class Buffer for separate canvas rendering/buffering",
            "is_constructor": 1,
            "uses": [
                "Entity"
            ],
            "params": [
                {
                    "name": "width",
                    "description": "of the buffer",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "of the buffer",
                    "type": "Number"
                },
                {
                    "name": "buffername",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "CG.Button"
        },
        {
            "file": "engine/button.js",
            "line": 9,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "image",
                    "description": "image image path, image or tpimage",
                    "type": "Image"
                },
                {
                    "name": "position",
                    "description": "position point",
                    "type": "CG.Point"
                },
                {
                    "name": "text",
                    "description": "the button text",
                    "type": "String"
                },
                {
                    "name": "font",
                    "description": "a CG.Font object for text rendering",
                    "type": "CG.Font"
                },
                {
                    "name": "clickedCallback",
                    "description": "callback function for click handling",
                    "type": "Callback"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Button"
        },
        {
            "file": "engine/button.js",
            "line": 22,
            "itemtype": "property",
            "name": "font",
            "type": "CG.Font",
            "class": "CG.Button"
        },
        {
            "file": "engine/button.js",
            "line": 26,
            "itemtype": "property",
            "name": "clickedCallback",
            "type": "Callback",
            "class": "CG.Button"
        },
        {
            "file": "engine/button.js",
            "line": 30,
            "itemtype": "property",
            "name": "clicked",
            "type": "Boolean",
            "class": "CG.Button"
        },
        {
            "file": "engine/button.js",
            "line": 34,
            "itemtype": "property",
            "name": "clickable",
            "type": "Boolean",
            "class": "CG.Button"
        },
        {
            "file": "engine/button.js",
            "line": 39,
            "itemtype": "property",
            "name": "text",
            "type": "String",
            "class": "CG.Button"
        },
        {
            "file": "engine/delta.js",
            "line": 11,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "fps",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CG.Delta"
        },
        {
            "file": "engine/delta.js",
            "line": 17,
            "itemtype": "property",
            "name": "targetfps",
            "type": "{Number}",
            "class": "CG.Delta"
        },
        {
            "file": "engine/delta.js",
            "line": 22,
            "itemtype": "property",
            "name": "currentticks",
            "type": "{Number}",
            "class": "CG.Delta"
        },
        {
            "file": "engine/delta.js",
            "line": 27,
            "itemtype": "property",
            "name": "lastticks",
            "type": "{Date}",
            "class": "CG.Delta"
        },
        {
            "file": "engine/delta.js",
            "line": 32,
            "itemtype": "property",
            "name": "frametime",
            "type": "{Number}",
            "class": "CG.Delta"
        },
        {
            "file": "engine/delta.js",
            "line": 37,
            "itemtype": "property",
            "name": "delta",
            "type": "{Number}",
            "class": "CG.Delta"
        },
        {
            "file": "engine/director.js",
            "line": 1,
            "description": "Director the top instance for screens and so on in the control hierarchy",
            "is_constructor": 1,
            "class": "CG.Emitter"
        },
        {
            "file": "engine/director.js",
            "line": 70,
            "description": "addScreen",
            "params": [
                {
                    "name": "screen",
                    "description": "to add to the screen list",
                    "type": "Screen"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/director.js",
            "line": 79,
            "description": "nextScreen",
            "params": [
                {
                    "name": "screenname",
                    "description": "to define nextscreen for fading",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "the duration for fading",
                    "type": "Number"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/director.js",
            "line": 92,
            "description": "getScreenByName",
            "params": [
                {
                    "name": "screenname",
                    "description": "to find screen by name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns false or the screen object",
                "type": "False/screen"
            },
            "class": "CG.Emitter"
        },
        {
            "file": "engine/director.js",
            "line": 107,
            "description": "getIndexOfScreen",
            "params": [
                {
                    "name": "screenname",
                    "description": "to find index of screen in screen array",
                    "type": "String"
                }
            ],
            "return": {
                "description": "return false or index number of the screen",
                "type": "False/integer"
            },
            "class": "CG.Emitter"
        },
        {
            "file": "engine/director.js",
            "line": 122,
            "description": "getActiveScreenName",
            "return": {
                "description": "the name of the active screen",
                "type": "String"
            },
            "class": "CG.Emitter"
        },
        {
            "file": "engine/director.js",
            "line": 131,
            "description": "setFadeMode",
            "return": {
                "description": "fademode for screen transitions => fade or scale",
                "type": "String"
            },
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 10,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "CG.Point"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 18,
            "itemtype": "property",
            "name": "particle",
            "type": "{Array}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 23,
            "itemtype": "property",
            "name": "maxparticles",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 28,
            "itemtype": "property",
            "name": "creationtime",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 33,
            "itemtype": "property",
            "name": "currenttime",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 38,
            "itemtype": "property",
            "name": "creationspeed",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 43,
            "itemtype": "property",
            "name": "gravity",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 48,
            "itemtype": "property",
            "name": "image",
            "type": "{null}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 53,
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 58,
            "itemtype": "property",
            "name": "position",
            "type": "{CG.Point}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 65,
            "itemtype": "property",
            "name": "rotation",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 70,
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 75,
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 80,
            "itemtype": "property",
            "name": "radius",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 85,
            "itemtype": "property",
            "name": "pspeed",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 90,
            "itemtype": "property",
            "name": "protation",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 95,
            "itemtype": "property",
            "name": "pdirection",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 100,
            "itemtype": "property",
            "name": "plifetime",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 105,
            "itemtype": "property",
            "name": "paging",
            "type": "{Number}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 110,
            "itemtype": "property",
            "name": "pfadeout",
            "type": "{Boolean}",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 121,
            "description": "initAsPoint",
            "params": [
                {
                    "name": "image",
                    "description": "path, image or tpimage to use for the particle",
                    "type": "Mixed"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 134,
            "itemtype": "method",
            "name": "initAsExplosion",
            "params": [
                {
                    "name": "image",
                    "description": "path, image or tpimage to use for the particle",
                    "type": "Mixed"
                },
                {
                    "name": "min",
                    "description": "value for particle speed",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "value for particle speed",
                    "type": "Number"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 149,
            "itemtype": "method",
            "name": "initAsCorona",
            "params": [
                {
                    "name": "image",
                    "description": "path, image or tpimage to use for the particle",
                    "type": "Mixed"
                },
                {
                    "name": "radius",
                    "description": "of the corona emitter",
                    "type": "Number"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 162,
            "itemtype": "method",
            "name": "initAsLine",
            "params": [
                {
                    "name": "image",
                    "description": "path, image or tpimage to use for the particle",
                    "type": "Mixed"
                },
                {
                    "name": "width",
                    "description": "of the plate emitter",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "(defined constants) of the plate emitter",
                    "type": "Number"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 177,
            "itemtype": "method",
            "name": "initAsRectangle",
            "params": [
                {
                    "name": "image",
                    "description": "path, image or tpimage to use for the particle",
                    "type": "Mixed"
                },
                {
                    "name": "width",
                    "description": "of the plate emitter",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "(defined constants) of the plate emitter",
                    "type": "Number"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 191,
            "itemtype": "method",
            "name": "createParticle",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 200,
            "itemtype": "method",
            "name": "initParticle",
            "params": [
                {
                    "name": "particle",
                    "description": "particle object",
                    "type": "Particle"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 324,
            "description": "Each emitter has its own particle pool to prevent object deletion/creation. This method searches an inactive/invisible particle",
            "itemtype": "method",
            "name": "searchInvisibleParticle",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 337,
            "itemtype": "method",
            "name": "setEmitterPosition",
            "params": [
                {
                    "name": "position",
                    "description": "of the emitter",
                    "type": "CG.Point"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 347,
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "name",
                    "description": "of the object for search with layerobject.getElementByName(name)",
                    "type": "String"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 357,
            "itemtype": "method",
            "name": "setCreationTime",
            "params": [
                {
                    "name": "creationtime",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 366,
            "itemtype": "method",
            "name": "setMaxParticles",
            "params": [
                {
                    "name": "maxparticle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 375,
            "itemtype": "method",
            "name": "setGravity",
            "params": [
                {
                    "name": "gravity",
                    "description": "for all emitter controlled particles",
                    "type": "Float"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 395,
            "itemtype": "method",
            "name": "setProtation",
            "params": [
                {
                    "name": "rotation",
                    "description": "set the rotation of the particles",
                    "type": "Mixed"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 405,
            "itemtype": "method",
            "name": "setPLifetime",
            "params": [
                {
                    "name": "plifetime",
                    "description": "set the lifetime of the particles",
                    "type": "Number"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 415,
            "itemtype": "method",
            "name": "activateFadeout",
            "description": "Activate fadeout of the particles depending on lifetime",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 424,
            "itemtype": "method",
            "name": "deactivateFadeout",
            "description": "Deactivate fadeout of the particles depending on lifetime",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 433,
            "itemtype": "method",
            "name": "getRandom",
            "params": [
                {
                    "name": "min",
                    "description": "value for random number",
                    "type": "Mixed"
                },
                {
                    "name": "max",
                    "description": "value for random number",
                    "type": "Mixed"
                }
            ],
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 443,
            "itemtype": "method",
            "name": "getX",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/emitter.js",
            "line": 450,
            "itemtype": "method",
            "name": "getY",
            "class": "CG.Emitter"
        },
        {
            "file": "engine/entity.js",
            "line": 1,
            "description": "© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "class": "CG.Entity"
        },
        {
            "file": "engine/entity.js",
            "line": 13,
            "is_constructor": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the Entity",
                    "type": "String"
                }
            ],
            "class": "CG.Entity"
        },
        {
            "file": "engine/entity.js",
            "line": 19,
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "CG.Entity"
        },
        {
            "file": "engine/entity.js",
            "line": 23,
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "class": "CG.Entity"
        },
        {
            "file": "engine/entity.js",
            "line": 40,
            "description": "initialize image for object. for now => sprite, particle, buffer, bitmap and button use it",
            "itemtype": "method",
            "name": "setImage",
            "params": [
                {
                    "name": "image",
                    "description": "image path, image or tpimage",
                    "type": "Image"
                }
            ],
            "class": "CG.Entity"
        },
        {
            "file": "engine/font.js",
            "line": 8,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 14,
            "itemtype": "property",
            "name": "atlas",
            "type": "Image",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 18,
            "itemtype": "property",
            "name": "initText",
            "type": "String",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 22,
            "itemtype": "property",
            "name": "chars",
            "type": "Array",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 26,
            "itemtype": "property",
            "name": "x",
            "type": "Array",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 30,
            "itemtype": "property",
            "name": "y",
            "type": "Array",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 34,
            "itemtype": "property",
            "name": "width",
            "type": "Array",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 38,
            "itemtype": "property",
            "name": "height",
            "type": "Array",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 42,
            "itemtype": "property",
            "name": "xoff",
            "type": "Array",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 46,
            "itemtype": "property",
            "name": "yoff",
            "type": "Array",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 50,
            "itemtype": "property",
            "name": "xadv",
            "type": "Array",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 54,
            "itemtype": "property",
            "name": "lineHeight",
            "type": "Number",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 58,
            "itemtype": "property",
            "name": "face",
            "type": "String",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 62,
            "itemtype": "property",
            "name": "size",
            "type": "Number",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 66,
            "itemtype": "property",
            "name": "bold",
            "type": "Number",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 70,
            "itemtype": "property",
            "name": "italic",
            "type": "Number",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 75,
            "itemtype": "property",
            "name": "base",
            "type": "Number",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 79,
            "itemtype": "property",
            "name": "scaleW",
            "type": "Number",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 83,
            "itemtype": "property",
            "name": "scaleH",
            "type": "Number",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 89,
            "itemtype": "method",
            "name": "update",
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 98,
            "description": "draw the given text to the canvas",
            "itemtype": "method",
            "name": "draw",
            "params": [
                {
                    "name": "text",
                    "description": "the text to draw",
                    "type": "String"
                },
                {
                    "name": "xpos",
                    "description": "the x position",
                    "type": "Number"
                },
                {
                    "name": "ypos",
                    "description": "the y position",
                    "type": "Number"
                }
            ],
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 119,
            "description": "get the line height of the current font",
            "itemtype": "method",
            "name": "getLineHeight",
            "return": {
                "description": "lineheight",
                "type": "Number"
            },
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 128,
            "description": "get the font size of the current font",
            "itemtype": "method",
            "name": "getFontSize",
            "return": {
                "description": "size  font size",
                "type": "Number"
            },
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 137,
            "description": "get the width of the given text",
            "itemtype": "method",
            "name": "getTextWidth  the string to calculate the width",
            "type": "String",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "textwidth",
                "type": "Number"
            },
            "class": "CG.Font"
        },
        {
            "file": "engine/font.js",
            "line": 152,
            "description": "loadFont - load and parse the given fontfile",
            "itemtype": "method",
            "name": "loadFont",
            "params": [
                {
                    "name": "fontfile",
                    "description": "path or mediaasset object with data",
                    "type": "String/object"
                }
            ],
            "class": "CG.Font"
        },
        {
            "file": "engine/intro.js",
            "line": 1,
            "description": "© 2013 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework\n\nhttps://www.github.com/samowitsch/cangaja/\n\nIncludes:\nhammer.js\nbuzz.js\nBox2dWeb-2.1.a.3.min.js",
            "class": "CG.Layer"
        },
        {
            "file": "engine/layer.js",
            "line": 9,
            "is_constructor": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "layername",
                    "description": "the name of the layer",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Layer"
        },
        {
            "file": "engine/layer.js",
            "line": 53,
            "description": "addElement to the layer",
            "itemtype": "method",
            "name": "addElement",
            "params": [
                {
                    "name": "element",
                    "description": "to add to elements array",
                    "type": "Obj"
                }
            ],
            "class": "CG.Layer"
        },
        {
            "file": "engine/layer.js",
            "line": 63,
            "description": "getElementByName",
            "itemtype": "method",
            "name": "getElementByName",
            "params": [
                {
                    "name": "elementname",
                    "description": "name of element to find in element array",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns false or the searched object",
                "type": "False/object"
            },
            "class": "CG.Layer"
        },
        {
            "file": "engine/layer.js",
            "line": 78,
            "description": "getElementsByName",
            "itemtype": "method",
            "name": "getElementsByName",
            "params": [
                {
                    "name": "elementname",
                    "description": "name of element to find in element array",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns a array of objects",
                "type": "Array"
            },
            "class": "CG.Layer"
        },
        {
            "file": "engine/map.js",
            "line": 22,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "width",
                    "description": "width of the map",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height of the map",
                    "type": "Number"
                },
                {
                    "name": "mapname",
                    "description": "mapname",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 33,
            "itemtype": "property",
            "name": "elements",
            "type": "{Array}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 42,
            "itemtype": "property",
            "name": "points",
            "type": "{Array}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 47,
            "itemtype": "property",
            "name": "areas",
            "type": "{Array}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 52,
            "itemtype": "property",
            "name": "position",
            "type": "{CG.Point}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 57,
            "itemtype": "property",
            "name": "changemap",
            "type": "{String}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 62,
            "description": "If set to true the map is being updated with method updateAnimation.\nSee also method description of updateAnimation!",
            "itemtype": "property",
            "name": "animated",
            "type": "{Boolean}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 72,
            "itemtype": "property",
            "name": "animDelayFactor",
            "type": "{Number}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 77,
            "itemtype": "property",
            "name": "atlas",
            "type": "{Image}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 82,
            "itemtype": "property",
            "name": "atlaswidth",
            "type": "{Number}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 87,
            "itemtype": "property",
            "name": "atlasheight",
            "type": "{Number}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 92,
            "itemtype": "property",
            "name": "atlastranscol",
            "type": "{String}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 99,
            "itemtype": "property",
            "name": "xml",
            "type": "{String}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 104,
            "itemtype": "property",
            "name": "parser",
            "type": "{DOMParser}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 109,
            "itemtype": "property",
            "name": "xmlDoc",
            "type": "{String}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 115,
            "itemtype": "property",
            "name": "json",
            "type": "{Object}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 120,
            "description": "The tiled layer are parsed into separate layers",
            "itemtype": "property",
            "name": "layers",
            "type": "{Array}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 129,
            "description": "Defines the layer to draw:\nall - for all layers\nname - the name of layer to draw\nindex - array index of layer",
            "itemtype": "property",
            "name": "renderlayer",
            "type": "{String}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 141,
            "itemtype": "property",
            "name": "tileproperties",
            "type": "{Array}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 146,
            "itemtype": "property",
            "name": "orientation",
            "type": "{String}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 151,
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 156,
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 161,
            "itemtype": "property",
            "name": "tilewidth",
            "type": "{Number}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 166,
            "itemtype": "property",
            "name": "tileheight",
            "type": "{Number}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 171,
            "itemtype": "property",
            "name": "tileset",
            "type": "{Object}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 183,
            "itemtype": "property",
            "name": "xspeed",
            "type": "{Number}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 188,
            "itemtype": "property",
            "name": "yspeed",
            "type": "{Number}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 193,
            "itemtype": "property",
            "name": "xscale",
            "type": "{Number}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 198,
            "itemtype": "property",
            "name": "yscale",
            "type": "{Number}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 203,
            "itemtype": "property",
            "name": "alpha",
            "type": "{Number}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 208,
            "itemtype": "property",
            "name": "wrapX",
            "deprecated": true,
            "type": "{Boolean}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 214,
            "itemtype": "property",
            "name": "wrapY",
            "deprecated": true,
            "type": "{Boolean}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 220,
            "itemtype": "property",
            "name": "layertocheck",
            "type": "{Number}",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 227,
            "itemtype": "method",
            "name": "loadMapXml",
            "description": "load and parse an xml tilemap file",
            "params": [
                {
                    "name": "xmlfile",
                    "description": "xmlfile path or mediaasset object with data of tiled map xml",
                    "type": "String/object"
                }
            ],
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 404,
            "itemtype": "method",
            "name": "loadMapJson",
            "description": "load and parse an tilemap json file",
            "params": [
                {
                    "name": "jsonfile",
                    "description": "jsonfile path or mediaasset object with data of tiled map xml",
                    "type": "String/object"
                }
            ],
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 517,
            "itemtype": "method",
            "name": "drawMap",
            "params": [
                {
                    "name": "sx",
                    "description": "sx top CG.LEFT coord for canvas drawing",
                    "type": "Number"
                },
                {
                    "name": "sy",
                    "description": "sy top CG.LEFT coord for canvas drawing",
                    "type": "Number"
                },
                {
                    "name": "bx",
                    "description": "bx top CG.LEFT x coord of bound in tilemap",
                    "type": "Number"
                },
                {
                    "name": "by",
                    "description": "by top CG.LEFT y coord of bound in tilemap",
                    "type": "Number"
                },
                {
                    "name": "bw",
                    "description": "bw width of bound in tilemap",
                    "type": "Number"
                },
                {
                    "name": "bh",
                    "description": "bh height of bound in tilemap",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "callback for collision handling - callback(obj,maptileproperties)",
                    "type": "Callback"
                }
            ],
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 679,
            "description": "Update all areas and points elements.",
            "itemtype": "method",
            "name": "updatePointsAndAreas",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 696,
            "description": "Get all point(s) with the given name in the points",
            "itemtype": "method",
            "name": "getPointsByName",
            "params": [
                {
                    "name": "name",
                    "description": "name of the points to return",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns false or an array with point(s)",
                "type": "False/array"
            },
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 719,
            "description": "getAreasByName - get all areas with the given name",
            "itemtype": "method",
            "name": "getAreasByName",
            "params": [
                {
                    "name": "name",
                    "description": "name of the area(s) to return",
                    "type": "String"
                }
            ],
            "return": {
                "description": "returns false or an array with area(s)",
                "type": "False/array"
            },
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 740,
            "description": "Defines layer drawing, See property options",
            "itemtype": "method",
            "name": "setLayerToRender",
            "params": [
                {
                    "name": "mixed",
                    "description": "mixed define the map layer(s) to render 'all' (string) for all layers, array index (integer) for layer to render or 'name' (string) of layer to render'",
                    "type": "Mixed"
                }
            ],
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 754,
            "description": "The update method is not complete yet and only experimental.\nAt the final stage the methods updateAnimation and updatePointsAndAreas have to be called from here!\nThen also a map class can be added to a layer as an element for auto update/draw from Game.director!",
            "itemtype": "method",
            "name": "update",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 782,
            "description": "yust calls drawMap ;o)",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 790,
            "description": "getBounds - get the bounds of the map",
            "itemtype": "method",
            "name": "getBounds",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 801,
            "description": "Updates the tilemap properties of the map.\n\nSupported custom tiled map properties for now are (see also tilemap examples):\nanim_delay       => time to used to display an switch to next tile\nanim_direction   => direction for next tile 1 = jump forward, -1 = jump back\nanim_next        => defines the offset\n\nWith this tile properties it is possible to define tilemap animations.\nThese must be defined in the tilemap property window with key/value pairs",
            "itemtype": "method",
            "name": "updateAnimation",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 852,
            "description": "Adds a object to the element array, used at the moment for collision detection to tilemap.",
            "itemtype": "method",
            "name": "addElement",
            "params": [
                {
                    "name": "element",
                    "description": "to to add to elements array",
                    "type": "Obj"
                }
            ],
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 866,
            "description": "Checks if the attached element collides with an tile of the tilemap",
            "itemtype": "method",
            "name": "checkMapCollision",
            "params": [
                {
                    "name": "element",
                    "description": "to check for",
                    "type": "Obj"
                },
                {
                    "name": "rx",
                    "description": "current rx of rendermap method",
                    "type": "Number"
                },
                {
                    "name": "ry",
                    "description": "current ry of rendermap method",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "returns true or false",
                "type": "Boolean"
            },
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 898,
            "description": "Checks if a external object(s) collides with the areas of the tiled map.\nThis can be elements from an layer or the map itself.",
            "params": [
                {
                    "name": "objarray",
                    "description": "to check for a areas collision",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "what should happen",
                    "type": "Callback"
                }
            ],
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 915,
            "description": "removes the json data of the map object",
            "itemtype": "method",
            "name": "removeJsonData",
            "class": "CG.Map"
        },
        {
            "file": "engine/map.js",
            "line": 923,
            "description": "removes the xml data of the map object",
            "itemtype": "method",
            "name": "removeXmlData",
            "class": "CG.Map"
        },
        {
            "file": "engine/maparea.js",
            "line": 8,
            "is_constructor": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "bound",
                    "description": "bound of area",
                    "type": "CG.Bound"
                },
                {
                    "name": "mapoffset",
                    "description": "mapoffset reference to the current map position",
                    "type": "CG.Point"
                },
                {
                    "name": "name",
                    "description": "name of the group",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "type (a property) of area for collision detection or what ever ;o)",
                    "type": "False/string"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.MapArea"
        },
        {
            "file": "engine/maparea.js",
            "line": 18,
            "itemtype": "property",
            "name": "initbound",
            "type": "{CG.Bound}",
            "class": "CG.MapArea"
        },
        {
            "file": "engine/maparea.js",
            "line": 23,
            "itemtype": "property",
            "name": "mapoffset",
            "type": "{CG.Point}",
            "class": "CG.MapArea"
        },
        {
            "file": "engine/maparea.js",
            "line": 28,
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "CG.MapArea"
        },
        {
            "file": "engine/maparea.js",
            "line": 33,
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "class": "CG.MapArea"
        },
        {
            "file": "engine/maparea.js",
            "line": 39,
            "itemtype": "property",
            "name": "bound",
            "type": "{CG.Bound}",
            "class": "CG.MapArea"
        },
        {
            "file": "engine/mappoint.js",
            "line": 1,
            "description": "class MapPoint. Support now for name, gid and x/y-position values. No tilemap properties at the moment.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "position",
                    "description": "point",
                    "type": "Point"
                },
                {
                    "name": "mapoffset",
                    "description": "reference to the current map position",
                    "type": "Point"
                },
                {
                    "name": "name",
                    "description": "of the tile",
                    "type": "String"
                },
                {
                    "name": "gid",
                    "description": "number of tilemap editor",
                    "type": "Number"
                }
            ],
            "class": "CG.MapTileLayer"
        },
        {
            "file": "engine/maptilelayer.js",
            "line": 8,
            "is_constructor": 1,
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.MapTileLayer"
        },
        {
            "file": "engine/maptilelayer.js",
            "line": 14,
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "CG.MapTileLayer"
        },
        {
            "file": "engine/maptilelayer.js",
            "line": 19,
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "CG.MapTileLayer"
        },
        {
            "file": "engine/maptilelayer.js",
            "line": 24,
            "itemtype": "property",
            "name": "visible",
            "type": "{Boolean}",
            "class": "CG.MapTileLayer"
        },
        {
            "file": "engine/maptilelayer.js",
            "line": 29,
            "itemtype": "property",
            "name": "opacity",
            "type": "{Number}",
            "class": "CG.MapTileLayer"
        },
        {
            "file": "engine/maptilelayer.js",
            "line": 34,
            "itemtype": "property",
            "name": "tiles",
            "type": "{Array}",
            "class": "CG.MapTileLayer"
        },
        {
            "file": "engine/maptileproperties.js",
            "line": 8,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.MapTileProperties"
        },
        {
            "file": "engine/maptileproperties.js",
            "line": 14,
            "itemtype": "property",
            "name": "animated",
            "type": "{Boolean}",
            "class": "CG.MapTileProperties"
        },
        {
            "file": "engine/maptileproperties.js",
            "line": 19,
            "itemtype": "property",
            "name": "animDelay",
            "type": "{Number}",
            "class": "CG.MapTileProperties"
        },
        {
            "file": "engine/maptileproperties.js",
            "line": 24,
            "itemtype": "property",
            "name": "animDirection",
            "type": "{Number}",
            "class": "CG.MapTileProperties"
        },
        {
            "file": "engine/maptileproperties.js",
            "line": 29,
            "itemtype": "property",
            "name": "animNext",
            "type": "{Number}",
            "class": "CG.MapTileProperties"
        },
        {
            "file": "engine/maptileproperties.js",
            "line": 34,
            "itemtype": "property",
            "name": "delayTimer",
            "type": "{Number}",
            "class": "CG.MapTileProperties"
        },
        {
            "file": "engine/mediaasset.js",
            "line": 10,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "image",
                    "description": "image path to background image of preloader",
                    "type": "String"
                }
            ],
            "class": "CG.MediaAsset"
        },
        {
            "file": "engine/mediaasset.js",
            "line": 55,
            "itemtype": "method",
            "name": "addImage",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.MediaAsset"
        },
        {
            "file": "engine/mediaasset.js",
            "line": 70,
            "itemtype": "method",
            "name": "addFont",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.MediaAsset"
        },
        {
            "file": "engine/mediaasset.js",
            "line": 85,
            "itemtype": "method",
            "name": "addXml",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.MediaAsset"
        },
        {
            "file": "engine/mediaasset.js",
            "line": 100,
            "itemtype": "method",
            "name": "addJson",
            "params": [
                {
                    "name": "path",
                    "description": ""
                },
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.MediaAsset"
        },
        {
            "file": "engine/mediaasset.js",
            "line": 115,
            "itemtype": "method",
            "name": "getImageByName",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.MediaAsset"
        },
        {
            "file": "engine/mediaasset.js",
            "line": 132,
            "itemtype": "method",
            "name": "getImagesByName",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.MediaAsset"
        },
        {
            "file": "engine/mediaasset.js",
            "line": 153,
            "itemtype": "method",
            "name": "getFontByName",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.MediaAsset"
        },
        {
            "file": "engine/mediaasset.js",
            "line": 166,
            "itemtype": "method",
            "name": "getXmlByName",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.MediaAsset"
        },
        {
            "file": "engine/mediaasset.js",
            "line": 179,
            "itemtype": "method",
            "name": "getJsonByName",
            "params": [
                {
                    "name": "name",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.MediaAsset"
        },
        {
            "file": "engine/mediaasset.js",
            "line": 192,
            "itemtype": "method",
            "name": "startPreLoad",
            "class": "CG.MediaAsset"
        },
        {
            "file": "engine/menu.js",
            "line": 1,
            "description": "class Menu",
            "is_constructor": 1,
            "uses": [
                "Entity"
            ],
            "params": [
                {
                    "name": "x",
                    "description": "the x position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position",
                    "type": "Number"
                },
                {
                    "name": "margin",
                    "description": "the margin between the menu buttons",
                    "type": "Number"
                }
            ],
            "class": "CG.Particle"
        },
        {
            "file": "engine/menu.js",
            "line": 20,
            "description": "add a button to the menu",
            "params": [
                {
                    "name": "button",
                    "description": "",
                    "type": "Button"
                }
            ],
            "class": "CG.Particle"
        },
        {
            "file": "engine/morph.js",
            "line": 1,
            "description": "class Morph to manipulate objects in size and so on",
            "is_constructor": 1,
            "uses": [
                "Entity"
            ],
            "params": [
                {
                    "name": "mode",
                    "description": "type of the morph object",
                    "type": "String"
                },
                {
                    "name": "min",
                    "description": "min value",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "max value",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "speed value",
                    "type": "Number"
                }
            ],
            "class": "CG.Particle"
        },
        {
            "file": "engine/morph.js",
            "line": 42,
            "description": "get the current value",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "CG.Particle"
        },
        {
            "file": "engine/particle.js",
            "line": 10,
            "is_constructor": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "image",
                    "description": "image imgpath, image object or tpimage object to use for the particle",
                    "type": "Mixed"
                }
            ],
            "class": "CG.Particle"
        },
        {
            "file": "engine/particle.js",
            "line": 17,
            "itemtype": "property",
            "name": "lifetime",
            "type": "{Number}",
            "class": "CG.Particle"
        },
        {
            "file": "engine/particle.js",
            "line": 22,
            "itemtype": "property",
            "name": "currtime",
            "type": "{Number}",
            "class": "CG.Particle"
        },
        {
            "file": "engine/particle.js",
            "line": 27,
            "itemtype": "property",
            "name": "aging",
            "type": "{Number}",
            "class": "CG.Particle"
        },
        {
            "file": "engine/particle.js",
            "line": 32,
            "itemtype": "property",
            "name": "fadeout",
            "type": "{Boolean}",
            "class": "CG.Particle"
        },
        {
            "file": "engine/particle.js",
            "line": 37,
            "itemtype": "property",
            "name": "alpha",
            "type": "{Number}",
            "class": "CG.Particle"
        },
        {
            "file": "engine/particle.js",
            "line": 42,
            "itemtype": "property",
            "name": "gravity",
            "type": "{Number}",
            "class": "CG.Particle"
        },
        {
            "file": "engine/point.js",
            "line": 8,
            "is_constructor": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "x",
                    "description": "the x value of the point",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y value of the point",
                    "type": "Number"
                }
            ],
            "class": "CG.Point"
        },
        {
            "file": "engine/point.js",
            "line": 15,
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "CG.Point"
        },
        {
            "file": "engine/point.js",
            "line": 19,
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "CG.Point"
        },
        {
            "file": "engine/rectangle.js",
            "line": 9,
            "is_constructor": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "position",
                    "description": "position point",
                    "type": "CG.Point"
                },
                {
                    "name": "width",
                    "description": "width the width of rectangle",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height the height of rectangle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 18,
            "itemtype": "property",
            "name": "position",
            "type": "CG.Point",
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 22,
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 26,
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 30,
            "itemtype": "property",
            "name": "clickable",
            "type": "Boolean",
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 34,
            "itemtype": "property",
            "name": "dragable",
            "type": "Boolean",
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 38,
            "itemtype": "property",
            "name": "rotation",
            "type": "Number",
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 42,
            "itemtype": "property",
            "name": "xscale",
            "type": "Number",
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 46,
            "itemtype": "property",
            "name": "yscale",
            "type": "Number",
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 50,
            "itemtype": "property",
            "name": "clicked",
            "type": "Boolean",
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 54,
            "itemtype": "property",
            "name": "hover",
            "type": "Boolean",
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 59,
            "itemtype": "property",
            "name": "boundingradius",
            "type": "Number",
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 63,
            "itemtype": "property",
            "name": "mapcollision",
            "type": "Boolean",
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 70,
            "description": "returns the bounds of rotated rectangle",
            "itemtype": "method",
            "name": "AABB",
            "return": {
                "description": "returns the calculated bounds",
                "type": "Object"
            },
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 87,
            "description": "checks click inside of the rectangle, supports rotation",
            "itemtype": "method",
            "name": "ifClicked",
            "return": {
                "description": "",
                "type": "True/false"
            },
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 111,
            "description": "checks if the mouse/pointer is over the rectangle",
            "itemtype": "method",
            "name": "ifMouseOver",
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/rectangle.js",
            "line": 132,
            "description": "checks if there is a collision of the given objects to this object http://devmag.org.za/2009/04/13/basic-collision-detection-in-2d-part-1/",
            "itemtype": "method",
            "name": "checkCollision",
            "params": [
                {
                    "name": "objects",
                    "description": "a array of objects to check for collision => Sprites, Animations, MapAreas",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "what to do after collision?",
                    "type": "Callback"
                }
            ],
            "class": "CG.Rectangle"
        },
        {
            "file": "engine/screen.js",
            "line": 10,
            "is_constructor": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "screenname",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Screen"
        },
        {
            "file": "engine/screen.js",
            "line": 18,
            "itemtype": "property",
            "name": "xscale",
            "type": "{Number}",
            "class": "CG.Screen"
        },
        {
            "file": "engine/screen.js",
            "line": 23,
            "itemtype": "property",
            "name": "yscale",
            "type": "{Number}",
            "class": "CG.Screen"
        },
        {
            "file": "engine/screen.js",
            "line": 28,
            "itemtype": "property",
            "name": "layers",
            "type": "{Array}",
            "class": "CG.Screen"
        },
        {
            "file": "engine/screen.js",
            "line": 56,
            "description": "add a layer object to the layer array",
            "itemtype": "method",
            "name": "addLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "to add",
                    "type": "Layer"
                }
            ],
            "class": "CG.Screen"
        },
        {
            "file": "engine/screen.js",
            "line": 66,
            "description": "find layer by name",
            "itemtype": "method",
            "name": "getLayerByName",
            "params": [
                {
                    "name": "layername",
                    "description": "find layer by name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "False/layer"
            },
            "class": "CG.Screen"
        },
        {
            "file": "engine/sequence.js",
            "line": 8,
            "is_constructor": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "sequencename",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Sequence"
        },
        {
            "file": "engine/sequence.js",
            "line": 16,
            "itemtype": "property",
            "name": "current",
            "type": "{Number}",
            "class": "CG.Sequence"
        },
        {
            "file": "engine/sequence.js",
            "line": 21,
            "itemtype": "property",
            "name": "loop",
            "type": "{Boolean}",
            "class": "CG.Sequence"
        },
        {
            "file": "engine/sequence.js",
            "line": 26,
            "itemtype": "property",
            "name": "translations",
            "type": "{Array}",
            "class": "CG.Sequence"
        },
        {
            "file": "engine/sequence.js",
            "line": 33,
            "description": "add a translation object to the sequence array",
            "itemtype": "method",
            "name": "addTranslation",
            "params": [
                {
                    "name": "translationobj",
                    "description": "the translation object to add",
                    "type": "Translation"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Sequence"
        },
        {
            "file": "engine/sprite.js",
            "line": 8,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "image",
                    "description": "imgpath, image object or tpimage object to use",
                    "type": "Image"
                },
                {
                    "name": "position",
                    "description": "position object",
                    "type": "CG.Point"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 18,
            "itemtype": "property",
            "name": "atlasimage",
            "type": "Boolean",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 24,
            "itemtype": "property",
            "name": "bound",
            "type": "CG.Bound",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 28,
            "itemtype": "property",
            "name": "diffpoint",
            "type": "CG.Point",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 33,
            "itemtype": "property",
            "name": "xspeed",
            "type": "Number",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 37,
            "itemtype": "property",
            "name": "xscale",
            "type": "Number",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 41,
            "itemtype": "property",
            "name": "xhandle",
            "type": "Number",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 45,
            "itemtype": "property",
            "name": "yspeed",
            "type": "Number",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 49,
            "itemtype": "property",
            "name": "yscale",
            "type": "Number",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 53,
            "itemtype": "property",
            "name": "yhandle",
            "type": "Number",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 57,
            "itemtype": "property",
            "name": "boundsMode",
            "type": "False/string",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 61,
            "itemtype": "property",
            "name": "rotation",
            "type": "Integer/float",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 65,
            "itemtype": "property",
            "name": "rotationspeed",
            "type": "Integer/float",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 69,
            "itemtype": "property",
            "name": "alpha",
            "type": "Float",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 73,
            "itemtype": "property",
            "name": "clicked",
            "type": "Boolean",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 78,
            "itemtype": "property",
            "name": "followobject",
            "type": "Boolean/object",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 82,
            "itemtype": "property",
            "name": "followspeed",
            "type": "Boolean/integer",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 86,
            "itemtype": "property",
            "name": "followsteps",
            "type": "Boolean/integer",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 91,
            "itemtype": "property",
            "name": "attachedobject",
            "type": "Boolean",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 95,
            "itemtype": "property",
            "name": "offsetx",
            "type": "Number",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 99,
            "itemtype": "property",
            "name": "offsety",
            "type": "Number",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 140,
            "description": "Checks the bound if a boundMode (bounce or slide) is set",
            "itemtype": "method",
            "name": "checkBound",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 183,
            "description": "calculate offset if bound is moving",
            "itemtype": "method",
            "name": "updateDiff",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 197,
            "description": "is there an attached element, this sprite will follow it depending on followspeed or followsteps it follows different",
            "itemtype": "method",
            "name": "follow",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 231,
            "description": "set the bound of the sprite",
            "itemtype": "method",
            "name": "setBound",
            "params": [
                {
                    "name": "bound",
                    "description": "the bound",
                    "type": "CG.Bound"
                }
            ],
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 242,
            "description": "if there is a attached object get its position",
            "itemtype": "method",
            "name": "ifAttached",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 253,
            "description": "attach a reference of the given object to this object",
            "itemtype": "method",
            "name": "attachObject",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 262,
            "description": "removes the attached object reference",
            "itemtype": "method",
            "name": "removeAttachedObject",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 271,
            "description": "set the x offset of the attached object to this object",
            "itemtype": "method",
            "name": "setAttachedOffsetX",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/sprite.js",
            "line": 280,
            "description": "set the y offset of the attached object to this object",
            "itemtype": "method",
            "name": "setAttachedOffsetY",
            "class": "CG.Sprite"
        },
        {
            "file": "engine/string.js",
            "line": 1,
            "description": "string functions",
            "class": "CG.TexturePacker"
        },
        {
            "file": "engine/texturepacker.js",
            "line": 8,
            "is_constructor": 1,
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.TexturePacker"
        },
        {
            "file": "engine/texturepacker.js",
            "line": 19,
            "itemtype": "property",
            "name": "imagename",
            "type": "{String}",
            "class": "CG.TexturePacker"
        },
        {
            "file": "engine/texturepacker.js",
            "line": 24,
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "CG.TexturePacker"
        },
        {
            "file": "engine/texturepacker.js",
            "line": 29,
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "CG.TexturePacker"
        },
        {
            "file": "engine/texturepacker.js",
            "line": 34,
            "itemtype": "property",
            "name": "tpimages",
            "type": "{Array}",
            "class": "CG.TexturePacker"
        },
        {
            "file": "engine/texturepacker.js",
            "line": 41,
            "description": "load a xml file from texturepacker",
            "itemtype": "method",
            "name": "loadXml",
            "params": [
                {
                    "name": "xmlfile",
                    "description": "path or mediaasset object with data of texturepacker xml",
                    "type": "String/object"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.TexturePacker"
        },
        {
            "file": "engine/texturepacker.js",
            "line": 82,
            "description": "load a json file from texturepacker",
            "itemtype": "method",
            "name": "loadJson",
            "params": [
                {
                    "name": "jsonfile",
                    "description": "path or mediaasset object with data of texturepacker json",
                    "type": "String/object"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.TexturePacker"
        },
        {
            "file": "engine/texturepacker.js",
            "line": 124,
            "description": "get all texturepacker images (Use array.push.apply(array, anotherarray) to append to Game.asset)",
            "itemtype": "method",
            "name": "getTPImages",
            "return": {
                "description": "returns all tpimages of texturepacker file to use with Game.asset",
                "type": "Array"
            },
            "class": "CG.TexturePacker"
        },
        {
            "file": "engine/tpimage.js",
            "line": 8,
            "itemtype": "method",
            "name": "init",
            "is_constructor": 1,
            "params": [
                {
                    "name": "image",
                    "description": "imgpath, image object or tpimage object to use",
                    "type": "Image"
                },
                {
                    "name": "xoffset",
                    "description": "xoffset of image in atlas file",
                    "type": "Number"
                },
                {
                    "name": "yoffset",
                    "description": "yoffset of image in atlas file",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "width of image in atlas file",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "height of image in atlas file",
                    "type": "Number"
                }
            ],
            "class": "CG.TPImage"
        },
        {
            "file": "engine/tpimage.js",
            "line": 18,
            "itemtype": "property",
            "name": "source",
            "type": "{String}",
            "class": "CG.TPImage"
        },
        {
            "file": "engine/tpimage.js",
            "line": 23,
            "itemtype": "property",
            "name": "atlasimage",
            "type": "{String}",
            "class": "CG.TPImage"
        },
        {
            "file": "engine/tpimage.js",
            "line": 28,
            "itemtype": "property",
            "name": "atlasname",
            "type": "{String}",
            "class": "CG.TPImage"
        },
        {
            "file": "engine/tpimage.js",
            "line": 33,
            "itemtype": "property",
            "name": "image",
            "type": "{*}",
            "class": "CG.TPImage"
        },
        {
            "file": "engine/tpimage.js",
            "line": 38,
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "CG.TPImage"
        },
        {
            "file": "engine/tpimage.js",
            "line": 43,
            "itemtype": "property",
            "name": "xoffset",
            "type": "{Number}",
            "class": "CG.TPImage"
        },
        {
            "file": "engine/tpimage.js",
            "line": 48,
            "itemtype": "property",
            "name": "yoffset",
            "type": "{*}",
            "class": "CG.TPImage"
        },
        {
            "file": "engine/tpimage.js",
            "line": 53,
            "itemtype": "property",
            "name": "width",
            "type": "{Number}",
            "class": "CG.TPImage"
        },
        {
            "file": "engine/tpimage.js",
            "line": 58,
            "itemtype": "property",
            "name": "height",
            "type": "{Number}",
            "class": "CG.TPImage"
        },
        {
            "file": "engine/tpimage.js",
            "line": 63,
            "itemtype": "property",
            "name": "rotation",
            "type": "{Number}",
            "class": "CG.TPImage"
        },
        {
            "file": "engine/translate.js",
            "line": 8,
            "init": "",
            "is_constructor": 1,
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 15,
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 20,
            "itemtype": "property",
            "name": "tx",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 25,
            "itemtype": "property",
            "name": "ty",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 30,
            "properzty": "x1",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 35,
            "itemtype": "property",
            "name": "y1",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 40,
            "itemtype": "property",
            "name": "x2",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 45,
            "itemtype": "property",
            "name": "y2",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 50,
            "itemtype": "property",
            "name": "bx",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 55,
            "itemtype": "property",
            "name": "by",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 60,
            "itemtype": "property",
            "name": "theobj",
            "type": "{Object}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 65,
            "itemtype": "property",
            "name": "r1",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 70,
            "itemtype": "property",
            "name": "r2",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 75,
            "itemtype": "property",
            "name": "startangle",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 80,
            "itemtype": "property",
            "name": "angle",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 85,
            "itemtype": "property",
            "name": "speed",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 90,
            "itemtype": "property",
            "name": "steps",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 95,
            "itemtype": "property",
            "name": "step",
            "type": "{Number}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 100,
            "itemtype": "property",
            "name": "positions",
            "type": "{Array}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 105,
            "itemtype": "property",
            "name": "finished",
            "type": "{Boolean}",
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 112,
            "itemtype": "method",
            "name": "initTween",
            "params": [
                {
                    "name": "obj",
                    "description": "object to move",
                    "type": "Object"
                },
                {
                    "name": "steps",
                    "description": "steps of tween",
                    "type": "Number"
                },
                {
                    "name": "startpoint",
                    "description": "startpoint of tween",
                    "type": "Point"
                },
                {
                    "name": "endpoint",
                    "description": "endpoint of tween",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "",
                "type": "This"
            },
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 143,
            "itemtype": "method",
            "name": "initOval",
            "params": [
                {
                    "name": "obj",
                    "description": "obj object to move",
                    "type": "Object"
                },
                {
                    "name": "centerpoint",
                    "description": "centerpoint",
                    "type": "Point"
                },
                {
                    "name": "radius1",
                    "description": "radius1",
                    "type": "Number"
                },
                {
                    "name": "radius2",
                    "description": "radius2",
                    "type": "Number"
                },
                {
                    "name": "startangle",
                    "description": "startangle",
                    "type": "Number"
                },
                {
                    "name": "rotation",
                    "description": "rotation",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "This"
            },
            "class": "CG.Translate"
        },
        {
            "file": "engine/translate.js",
            "line": 166,
            "description": "initBezier\nhttp://13thparallel.com/archive/bezier-curves/",
            "itemtype": "method",
            "name": "initBezier",
            "params": [
                {
                    "name": "obj",
                    "description": "obj object to move",
                    "type": "Object"
                },
                {
                    "name": "steps",
                    "description": "steps of bézier curve",
                    "type": "Number"
                },
                {
                    "name": "startpoint",
                    "description": "startpoint startpoint of bézier",
                    "type": "CG.Point"
                },
                {
                    "name": "endpoint",
                    "description": "endpoint endpoint of bézier",
                    "type": "CG.Point"
                },
                {
                    "name": "control1",
                    "description": "control1 point for bézier calculation (optional)",
                    "type": "CG.Point"
                },
                {
                    "name": "control2",
                    "description": "control2 point for bézier calculation (optional)",
                    "type": "CG.Point"
                }
            ],
            "return": {
                "description": "",
                "type": "This"
            },
            "class": "CG.Translate"
        },
        {
            "file": "engine/vector.js",
            "line": 8,
            "is_constructor": 1,
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "x",
                    "description": "the x position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y position",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "the z position",
                    "type": "Number"
                }
            ],
            "class": "CG.Vector"
        },
        {
            "file": "engine/vector.js",
            "line": 17,
            "itemtype": "property",
            "name": "z",
            "type": "Number",
            "class": "CG.Vector"
        },
        {
            "file": "js/demo-sprite-collision.js",
            "line": 191,
            "description": "callback for map collision detection.\nfor the moment the map object sends the depending sprite and the tile as arguments",
            "class": ""
        },
        {
            "file": "js/demo-sprite-follower.js",
            "line": 176,
            "description": "callback for map collision detection.\nfor the moment the map object sends the depending sprite and the tile as arguments",
            "class": ""
        },
        {
            "file": "js/demo-tilemap-advanced-tilecollision.js",
            "line": 169,
            "description": "callback for map collision detection.\nfor the moment the map object sends the depending sprite and the tile as arguments",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/b2d-bridge.js:7"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/b2d-circle.js:7"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/b2d-entity.js:7"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/b2d-line.js:7"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/b2d-polygon.js:7"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/b2d-rectangle.js:7"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/b2d-rope.js:7"
        },
        {
            "message": "unknown tag: xtend",
            "line": " engine/b2d-world.js:7"
        },
        {
            "message": "replacing incorrect tag: augments with uses",
            "line": " engine/bitmap.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " engine/bitmap.js:90"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " engine/bitmap.js:101"
        },
        {
            "message": "replacing incorrect tag: augments with uses",
            "line": " engine/buffer.js:1"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/delta.js:1"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/emitter.js:1"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/map.js:1"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/maptileproperties.js:1"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/mediaasset.js:1"
        },
        {
            "message": "replacing incorrect tag: augments with uses",
            "line": " engine/menu.js:1"
        },
        {
            "message": "replacing incorrect tag: augments with uses",
            "line": " engine/morph.js:1"
        },
        {
            "message": "unknown tag: descriptiom",
            "line": " engine/particle.js:1"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/tpimage.js:1"
        },
        {
            "message": "replacing incorrect tag: extend with extends",
            "line": " engine/translate.js:1"
        },
        {
            "message": "unknown tag: init",
            "line": " engine/translate.js:8"
        },
        {
            "message": "unknown tag: properzty",
            "line": " engine/translate.js:30"
        },
        {
            "message": "Missing item type\n© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "line": " engine/b2d-bridge.js:1"
        },
        {
            "message": "Missing item type\n© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "line": " engine/b2d-circle.js:1"
        },
        {
            "message": "Missing item type\n© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "line": " engine/b2d-entity.js:1"
        },
        {
            "message": "Missing item type\n© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "line": " engine/b2d-line.js:1"
        },
        {
            "message": "Missing item type\n© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "line": " engine/b2d-polygon.js:1"
        },
        {
            "message": "Missing item type\n© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "line": " engine/b2d-rectangle.js:1"
        },
        {
            "message": "Missing item type",
            "line": " engine/b2d-rectangle.js:28"
        },
        {
            "message": "Missing item type\n© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "line": " engine/b2d-rope.js:1"
        },
        {
            "message": "Missing item type\n© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "line": " engine/b2d-world.js:1"
        },
        {
            "message": "Missing item type\nClass Bitmap extends Class Buffer",
            "line": " engine/bitmap.js:1"
        },
        {
            "message": "Missing item type\nloads image and draws it to the buffer",
            "line": " engine/bitmap.js:21"
        },
        {
            "message": "Missing item type\nclearBuffer",
            "line": " engine/bitmap.js:41"
        },
        {
            "message": "Missing item type\ndrawImageToBuffer",
            "line": " engine/bitmap.js:49"
        },
        {
            "message": "Missing item type\nclearRect",
            "line": " engine/bitmap.js:58"
        },
        {
            "message": "Missing item type\nclearCircle",
            "line": " engine/bitmap.js:73"
        },
        {
            "message": "Missing item type\ngetPixel",
            "line": " engine/bitmap.js:90"
        },
        {
            "message": "Missing item type\ngetPixels",
            "line": " engine/bitmap.js:101"
        },
        {
            "message": "Missing item type\nClass Buffer for separate canvas rendering/buffering",
            "line": " engine/buffer.js:1"
        },
        {
            "message": "Missing item type\nDirector the top instance for screens and so on in the control hierarchy",
            "line": " engine/director.js:1"
        },
        {
            "message": "Missing item type\naddScreen",
            "line": " engine/director.js:70"
        },
        {
            "message": "Missing item type\nnextScreen",
            "line": " engine/director.js:79"
        },
        {
            "message": "Missing item type\ngetScreenByName",
            "line": " engine/director.js:92"
        },
        {
            "message": "Missing item type\ngetIndexOfScreen",
            "line": " engine/director.js:107"
        },
        {
            "message": "Missing item type\ngetActiveScreenName",
            "line": " engine/director.js:122"
        },
        {
            "message": "Missing item type\nsetFadeMode",
            "line": " engine/director.js:131"
        },
        {
            "message": "Missing item type\ninitAsPoint",
            "line": " engine/emitter.js:121"
        },
        {
            "message": "Missing item type\n© 2012 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework",
            "line": " engine/entity.js:1"
        },
        {
            "message": "Missing item type\n© 2013 by Christian Sonntag <info@motions-media.de>\nsimple experimental Canvas Game JavaScript Framework\n\nhttps://www.github.com/samowitsch/cangaja/\n\nIncludes:\nhammer.js\nbuzz.js\nBox2dWeb-2.1.a.3.min.js",
            "line": " engine/intro.js:1"
        },
        {
            "message": "Missing item type\nyust calls drawMap ;o)",
            "line": " engine/map.js:782"
        },
        {
            "message": "Missing item type\nChecks if a external object(s) collides with the areas of the tiled map.\nThis can be elements from an layer or the map itself.",
            "line": " engine/map.js:898"
        },
        {
            "message": "Missing item type\nclass MapPoint. Support now for name, gid and x/y-position values. No tilemap properties at the moment.",
            "line": " engine/mappoint.js:1"
        },
        {
            "message": "Missing item type\nclass Menu",
            "line": " engine/menu.js:1"
        },
        {
            "message": "Missing item type\nadd a button to the menu",
            "line": " engine/menu.js:20"
        },
        {
            "message": "Missing item type\nclass Morph to manipulate objects in size and so on",
            "line": " engine/morph.js:1"
        },
        {
            "message": "Missing item type\nget the current value",
            "line": " engine/morph.js:42"
        },
        {
            "message": "Missing item type\nstring functions",
            "line": " engine/string.js:1"
        },
        {
            "message": "Missing item type",
            "line": " engine/translate.js:8"
        },
        {
            "message": "Missing item type",
            "line": " engine/translate.js:30"
        },
        {
            "message": "Missing item type\ncallback for map collision detection.\nfor the moment the map object sends the depending sprite and the tile as arguments",
            "line": " js/demo-sprite-collision.js:191"
        },
        {
            "message": "Missing item type\ncallback for map collision detection.\nfor the moment the map object sends the depending sprite and the tile as arguments",
            "line": " js/demo-sprite-follower.js:176"
        },
        {
            "message": "Missing item type\ncallback for map collision detection.\nfor the moment the map object sends the depending sprite and the tile as arguments",
            "line": " js/demo-tilemap-advanced-tilecollision.js:169"
        }
    ]
}